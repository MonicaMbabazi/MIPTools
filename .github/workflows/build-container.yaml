name: Build Singularity
on:
  # Manually run workflow
  workflow_dispatch:
    inputs:
      tag:
        description: "Tag for the built container"
        required: true
        default: "dev"

  # TODO: Uncomment the following lines of code when we have reduced the memory
  # usage of MIPTools.
  # Github issue: https://github.com/bailey-lab/MIPTools/issues/9
  # # Trigger on push
  # # Only triggers if anything in src/, bin/, programs/, a .ipynb file, or a .def
  # # file at the root of the repo changes
  # push:
  #   branches: [main, master]
  #   paths:
  #     - "src/**"
  #     - "bin/**"
  #     - "programs/**"
  #     - "*.def"
  #     - "**.ipynb"

  # # Trigger on PR
  # # Only triggers if anything in src/, bin/, programs/, a .ipynb file, or a .def
  # # file at the root of the repo changes
  # pull_request:
  #   paths:
  #     - "src/**"
  #     - "bin/**"
  #     - "programs/**"
  #     - "*.def"
  #     - "**.ipynb"

  # # Trigger on published release
  # release:
  #   types: [published]

# Set path to definition file
env:
  DEF_PATH: MIPTools.def

jobs:
  # Check if def file exists
  check-file-existence:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: File Existence
        uses: andstor/file-existence-action@v1.0.1
        with:
          files: ${{ env.DEF_PATH }}
          allow_failure: true

  # Determine tag for github package
  generate-tag:
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.save-output.outputs.tag }}
    steps:
      - name: Manually Triggered
        if: github.event_name == 'workflow_dispatch'
        run: |
          tag=${{ github.event.inputs.tag }}
          echo "TAG=$tag" >> $GITHUB_ENV

      - name: Triggered by Release
        if: github.event_name == 'release'
        run: |
          tag=${{ github.ref }}
          tag=${tag##*/}
          echo "TAG=$tag" >> $GITHUB_ENV

      - name: Triggered by Push or PR
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        run: |
          tag=dev
          echo "TAG=$tag" >> $GITHUB_ENV

      - name: Save output
        id: save-output
        run: |
          echo "::set-output name=tag::${{ env.TAG }}"
          echo "Tag is ${{ env.TAG }}"

  # Build the container
  build-container:
    needs: [check-file-existence, generate-tag]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup singularity
        uses: eWaterCycle/setup-singularity@v7
        with:
          singularity-version: 3.8.3

      - name: Build Container
        run: |
          singularity build --fakeroot container.sif ${{ env.DEF_PATH }}

      - name: Archive built container
        uses: actions/upload-artifact@v2
        with:
          name: container
          path: container.sif

      - name: Login and deploy container
        if: github.event_name != 'pull_request'
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | singularity remote login --username ${{ secrets.GHCR_USERNAME }} --password-stdin oras://ghcr.io
          singularity push container.sif oras://ghcr.io/${GITHUB_REPOSITORY}:${{ needs.generate-tag.outputs.tag }}

  # This does not work as a separate job because we need singularity installed
  # on the worker
  # to login and deploy to github
  # deploy-container:
  #   needs: [check-file-existence, generate-tag, build-container]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Download a single artifact
  #       if: github.event_name != 'pull_request'
  #       uses: actions/download-artifact@v2
  #       with:
  #         name: container
  #
  #     - name: Login and deploy container
  #      if: github.event_name != 'pull_request'
  #      run: |
  #        echo ${{ secrets.GITHUB_TOKEN }} | singularity remote login -u ${{ secrets.GHCR_USERNAME }} --password-stdin oras://ghcr.io
  #        singularity push container.sif oras://ghcr.io/${GITHUB_REPOSITORY}:${{ needs.generate-tag.outputs.tag }}
